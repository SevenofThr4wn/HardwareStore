@model List<HardwareStore.WebClient.ViewModels.Account.UserManageVM>
@{
    ViewData["Title"] = "Manage Users";
    Layout = "_Layout";
}

<div class="management-container">
    <div class="management-header">
        <h1 class="management-title">Manage Users</h1>
        <p class="text-muted">View and manage user accounts</p>
    </div>

    <!-- Search and Filter Section -->
    <div class="search-box mb-4">
        <form method="get" class="row g-3">
            <div class="col-md-4">
                <input type="text" name="searchString" class="form-control" 
                       placeholder="Search users..." value="@ViewBag.SearchString">
            </div>
            <div class="col-md-3">
                <select name="roleFilter" class="form-select" onchange="this.form.submit()">
                    <option value="">All Roles</option>
                    @foreach (var role in ViewBag.AvailableRoles)
                    {
                        <option value="@role" selected="@(ViewBag.RoleFilter == role)">@role</option>
                    }
                </select>
            </div>
            <div class="col-md-2">
                <button type="submit" class="btn btn-primary w-100">
                    <i class="bi bi-search"></i> Search
                </button>
            </div>
            <div class="col-md-3 text-end">
                <a href="javascript:void(0)" class="btn btn-outline-secondary" onclick="clearFilters()">
                    <i class="bi bi-x-circle"></i> Clear Filters
                </a>
            </div>
        </form>
    </div>

    <!-- Users Table -->
    <div class="users-table">
        @if (Model.Any())
        {
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>User</th>
                        <th>Email</th>
                        <th>Role</th>
                        <th>Status</th>
                        <th>Last Login</th>
                        <th>Created</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Model)
                    {
                        <tr>
                            <td>
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-person-circle me-3" style="font-size: 2rem;"></i>
                                    <div>
                                        <div class="fw-bold">@user.FullName</div>
                                        <small class="text-muted">@user.UserName</small>
                                    </div>
                                </div>
                            </td>
                            <td>@user.Email</td>
                            <td>
                                <span class="badge @user.RoleBadgeClass">@user.Role</span>
                            </td>
                            <td>
                                <span class="badge @user.StatusBadgeClass">@user.StatusText</span>
                            </td>
                            <td>
                                <small class="text-muted">@user.FormattedLastLogin</small>
                            </td>
                            <td>
                                <small class="text-muted">@user.FormattedCreatedDate</small>
                            </td>
                            <td>
                                <button class="btn btn-outline-primary btn-sm" onclick="editUser('@user.Id')">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button class="btn btn-outline-danger btn-sm" onclick="deleteUser('@user.Id', '@user.UserName')">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <!-- Pagination -->
            @if (ViewBag.TotalPages > 1)
            {
                <nav aria-label="User pagination">
                    <ul class="pagination justify-content-center">
                        @for (int i = 1; i <= ViewBag.TotalPages; i++)
                        {
                            <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                                <a class="page-link" 
                                   href="@Url.Action("ManageUsers", new { 
                                       searchString = ViewBag.SearchString, 
                                       roleFilter = ViewBag.RoleFilter, 
                                       page = i, 
                                       pageSize = ViewBag.PageSize 
                                   })">
                                    @i
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
            }

            <!-- Results Count -->
            <div class="text-muted text-center mt-3">
                Showing @((ViewBag.CurrentPage - 1) * ViewBag.PageSize + 1) to 
                @Math.Min(ViewBag.CurrentPage * ViewBag.PageSize, ViewBag.TotalUsers) 
                of @ViewBag.TotalUsers users
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="bi bi-people" style="font-size: 3rem; color: #6c757d;"></i>
                <h4>No users found</h4>
                <p class="text-muted">
                    @if (!string.IsNullOrEmpty(ViewBag.SearchString) || !string.IsNullOrEmpty(ViewBag.RoleFilter))
                    {
                        <span>No users match your search criteria.</span>
                    }
                    else
                    {
                        <span>No users found in the system.</span>
                    }
                </p>
                @if (!string.IsNullOrEmpty(ViewBag.SearchString) || !string.IsNullOrEmpty(ViewBag.RoleFilter))
                {
                    <a href="@Url.Action("ManageUsers")" class="btn btn-primary">
                        <i class="bi bi-arrow-left"></i> View All Users
                    </a>
                }
            </div>
        }
    </div>
</div>

<!-- Edit User Modal -->
<div class="modal fade" id="editUserModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editUserForm">
                    <input type="hidden" id="editUserId" name="Id">
                    
                    <div class="form-group mb-3">
                        <label class="form-label">Username</label>
                        <input type="text" id="editUserName" class="form-control" readonly>
                    </div>

                    <div class="form-group mb-3">
                        <label class="form-label">Email *</label>
                        <input type="email" id="editUserEmail" name="Email" class="form-control" required>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">First Name</label>
                            <input type="text" id="editUserFirstName" name="FirstName" class="form-control">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Last Name</label>
                            <input type="text" id="editUserLastName" name="LastName" class="form-control">
                        </div>
                    </div>

                    <div class="form-group mb-3">
                        <label class="form-label">Role *</label>
                        <select id="editUserRole" name="Role" class="form-select" required>
                            <option value="">Select Role</option>
                        </select>
                    </div>

                    <div class="form-check mb-3">
                        <input type="checkbox" id="editUserIsActive" name="IsActive" class="form-check-input">
                        <label class="form-check-label" for="editUserIsActive">Active User</label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveUser()">Save Changes</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function clearFilters() {
            window.location.href = '@Url.Action("ManageUsers")';
        }

        async function editUser(userId) {
            try {
                const response = await fetch('@Url.Action("GetUser")?id=' + userId);
                if (!response.ok) throw new Error('Failed to fetch user data');
                
                const data = await response.json();
                const user = data.user;
                const availableRoles = data.availableRoles;

                // Populate form
                document.getElementById('editUserId').value = user.id;
                document.getElementById('editUserName').value = user.userName;
                document.getElementById('editUserEmail').value = user.email;
                document.getElementById('editUserFirstName').value = user.firstName;
                document.getElementById('editUserLastName').value = user.lastName;
                document.getElementById('editUserIsActive').checked = user.isActive;

                // Populate roles dropdown
                const roleSelect = document.getElementById('editUserRole');
                roleSelect.innerHTML = '<option value="">Select Role</option>';
                availableRoles.forEach(role => {
                    const option = document.createElement('option');
                    option.value = role;
                    option.textContent = role;
                    option.selected = role === user.role;
                    roleSelect.appendChild(option);
                });

                // Show modal
                new bootstrap.Modal(document.getElementById('editUserModal')).show();
            } catch (error) {
                alert('Error loading user: ' + error.message);
            }
        }

        async function saveUser() {
            const form = document.getElementById('editUserForm');
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());
            data.IsActive = document.getElementById('editUserIsActive').checked;

            try {
                const response = await fetch('@Url.Action("EditUser")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(data)
                });

                if (response.ok) {
                    const result = await response.json();
                    alert(result.message);
                    bootstrap.Modal.getInstance(document.getElementById('editUserModal')).hide();
                    location.reload();
                } else {
                    throw new Error('Failed to update user');
                }
            } catch (error) {
                alert('Error saving user: ' + error.message);
            }
        }

        function deleteUser(userId, userName) {
            if (confirm(`Are you sure you want to delete user "${userName}"? This action cannot be undone.`)) {
                fetch('@Url.Action("DeleteUser")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ id: userId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(data.message);
                        location.reload();
                    } else {
                        alert('Error: ' + data.message);
                    }
                })
                .catch(error => {
                    alert('Error deleting user: ' + error.message);
                });
            }
        }
    </script>
}